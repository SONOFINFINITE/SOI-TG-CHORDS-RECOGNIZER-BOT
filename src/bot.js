import { Bot } from 'grammy';
import dotenv from 'dotenv';
import { recognizeSong } from './api/getTrack.js';
import { getChordInfo } from './api/getChords.js';
import { downloadFile, deleteFile } from './utils/downloader.js';

dotenv.config();

const bot = new Bot(process.env.BOT_TOKEN);

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.command('start', async (ctx) => {
    await ctx.reply(
        `üé∏ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å! üéµ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞–∫–∫–æ—Ä–¥—ã –∏–∑ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π –∏ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–µ –∑–≤—É—á–∞–Ω–∏–µ –º–µ–ª–æ–¥–∏–π. –î–æ–≤–µ—Ä—å—Å—è –º–Ω–µ, –∏ –≤–º–µ—Å—Ç–µ –º—ã –ø—Ä–æ–π–¥–µ–º –ø–æ –≤–æ–ª–Ω–∞–º –º—É–∑—ã–∫–∏ –∏ —Å–æ–∑–¥–∞–¥–∏–º –≥–∞—Ä–º–æ–Ω–∏—é –∑–≤—É–∫–æ–≤. –ü–æ–≥—Ä—É–∑–∏–º—Å—è –≤ –º–∏—Ä –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –≤–º–µ—Å—Ç–µ! üéº

üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ —Å –ø–µ—Å–Ω–µ–π
2. –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é –ø–µ—Å–Ω—é –∏ –Ω–∞–π–¥—É –∞–∫–∫–æ—Ä–¥—ã
3. –ü–æ–ª—É—á–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é

üéØ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±—É—é –ø–µ—Å–Ω—é, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ!`
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
bot.on(['message:audio'], async (ctx) => {
    let filePath;
    try {
        await ctx.reply('–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –∏ –ø—ã—Ç–∞—é—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–µ—Å–Ω—é... üéµ');
        
        let file;
        
        if (ctx.message.audio) {
            file = ctx.message.audio;
        } else if (ctx.message.voice) {
            file = ctx.message.voice;
        } else if (ctx.message.video) {
            file = ctx.message.video;
        }

        const fileUrl = await ctx.api.getFile(file.file_id);
        filePath = await downloadFile(fileUrl.file_path);

        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –ø–µ—Å–Ω—é
        const songInfo = await recognizeSong(filePath);
        
        if (!songInfo) {
            await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–µ—Å–Ω—é üòî');
            return;
        }

        await ctx.reply(
            `üéß <b>–ù–ê–ô–î–ï–ù–ê –ü–ï–°–ù–Ø:</b>
üéµ<b>${songInfo.title.toUpperCase()}</b>
üë®‚Äçüé§ <b>${songInfo.artist.toUpperCase()}</b>

–ò—â—É –∞–∫–∫–æ—Ä–¥—ã...`,
            { parse_mode: 'HTML' }
        );

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã
        try {
            const chordInfo = await getChordInfo(songInfo.title, songInfo.artist, songInfo);
            
            if (!chordInfo) {
                return await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–∫–∫–æ—Ä–¥—ã –¥–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî',
                    { parse_mode: 'HTML' }
                );
            }

            if (chordInfo.formatted && chordInfo.analysis) {
                await ctx.reply(
                    'üéµ <b>–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏:</b>\n\n' +
                    chordInfo.formatted,
                    { parse_mode: 'HTML' }
                );

                await ctx.reply(
                    chordInfo.analysis,
                    { parse_mode: 'HTML' }
                );
            }

        } catch (error) {
            console.error('Error getting chords:', error);
            await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–æ—Ä–¥—ã –¥–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ üòî');
        }

    } catch (error) {
        console.error('Error processing message:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ üòî');
    } finally {
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (filePath) {
            deleteFile(filePath);
        }
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
console.log('Bot started successfully!');
